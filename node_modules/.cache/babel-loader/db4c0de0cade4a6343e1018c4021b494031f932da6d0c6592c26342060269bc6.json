{"ast":null,"code":"import _slicedToArray from\"C:/Users/jeyde/Documents/GitHub/it-career-assist/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useContext,useEffect,useState}from'react';import{AppContext}from'../../context/Context';import{useNavigate}from'react-router-dom';import{ToastContainer,toast}from\"react-toastify\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var QuestionPage=function QuestionPage(){// Use the useContext hook to get the 'name' value from the context API\nvar _useContext=useContext(AppContext),name=_useContext.name;// Use the useNavigate hook to create a 'navigate' function for navigating to different pages\nvar navigate=useNavigate();//creating a list of questions to iterate through\nvar questionsList=[\" are you a beginner?\",\" are you interested in software development?\",\" are you interested in network engineering?\",\" are you interested in cyber security?\",\" are you interested in cloud computing?\"];//keeping count of what question # the user is on\nvar _useState=useState(0),_useState2=_slicedToArray(_useState,2),questionCount=_useState2[0],setQuestionCount=_useState2[1];//setting the current question on the UI to match the question # the user is currently on\nvar _useState3=useState(questionsList[questionCount]),_useState4=_slicedToArray(_useState3,2),currentQuestion=_useState4[0],setCurrentQuestion=_useState4[1];// Use the useEffect hook to run some code when the component is first rendered\nuseEffect(function(){// If the 'name' value from the context is non-existent, navigate to the root page '/'\nif(!name){navigate('/');}//updating the current question whenever the question count increases\nsetCurrentQuestion(questionsList[questionCount]);//making sure that if the user said \"no\" to all the questions, for them to start the survey all over again\nif(questionCount>4){setQuestionCount(0);setCurrentQuestion(questionsList[0]);//notifying the user that they must say yes to at least one question\ntoast.error(\"You must answer yes to one of the questions \"+name);}},[questionCount]);//whenever questionCount is updated, page will be re-rendered and useEffect function will be re-ran\n//when ever \"no\" is selected, update the question count +1\nfunction noHandler(){setQuestionCount(questionCount+1);}//whenever \"yes\" is selected, navigate to the appropriate URL in accordance to the question number they are on\nfunction navigator(){if(questionCount===0){navigate('/beginnerGuide');}else if(questionCount===1){navigate('/softwareDevelopment');}else if(questionCount===2){navigate('/networking');}else if(questionCount===3){navigate('/cyberSecurity');}else if(questionCount===4){navigate('/cloudComputing');}}return/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"center-question\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"row\",children:/*#__PURE__*/_jsx(\"div\",{className:\"col-xs-auto col-sm-auto col-md-auto col-xl-auto col-xxl-auto\",children:/*#__PURE__*/_jsxs(\"h2\",{className:\"animate-character\",children:[name,\" \",currentQuestion]})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"row justify-content-center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"col-xs-6 col-sm-4 col-md-4 col-xl-3 col-xxl-3\",children:/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-outline-secondary btn-light\",onClick:navigator,children:/*#__PURE__*/_jsx(\"strong\",{children:\"Yes\"})})}),/*#__PURE__*/_jsx(\"div\",{className:\"col-xs-6 col-sm-4 col-md-4 col-xl-3 col-xxl-3\",children:/*#__PURE__*/_jsx(\"button\",{className:\"btn btn-outline-secondary btn-light\",onClick:noHandler,children:/*#__PURE__*/_jsx(\"strong\",{children:\"No\"})})})]})]}),/*#__PURE__*/_jsx(ToastContainer,{})]});};export default QuestionPage;","map":{"version":3,"names":["React","useContext","useEffect","useState","AppContext","useNavigate","ToastContainer","toast","QuestionPage","name","navigate","questionsList","questionCount","setQuestionCount","currentQuestion","setCurrentQuestion","error","noHandler","navigator"],"sources":["C:/Users/jeyde/Documents/GitHub/it-career-assist/src/components/pages/QuestionPage.jsx"],"sourcesContent":["import React, { useContext, useEffect, useState } from 'react'\r\nimport { AppContext } from '../../context/Context'\r\nimport {useNavigate } from 'react-router-dom'\r\nimport {ToastContainer, toast} from \"react-toastify\"\r\n\r\nconst QuestionPage = () => {\r\n  // Use the useContext hook to get the 'name' value from the context API\r\n  const {name} = useContext(AppContext)\r\n  // Use the useNavigate hook to create a 'navigate' function for navigating to different pages\r\n  let navigate = useNavigate()\r\n  //creating a list of questions to iterate through\r\n  let questionsList = [\" are you a beginner?\", \" are you interested in software development?\", \" are you interested in network engineering?\", \" are you interested in cyber security?\", \" are you interested in cloud computing?\"]\r\n  //keeping count of what question # the user is on\r\n  let [questionCount, setQuestionCount] = useState(0)\r\n  //setting the current question on the UI to match the question # the user is currently on\r\n  let [currentQuestion, setCurrentQuestion] = useState(questionsList[questionCount])\r\n\r\n  // Use the useEffect hook to run some code when the component is first rendered\r\n  useEffect(() => {\r\n    // If the 'name' value from the context is non-existent, navigate to the root page '/'\r\n    if(!name) {\r\n      navigate('/')\r\n    }\r\n    //updating the current question whenever the question count increases\r\n    setCurrentQuestion(questionsList[questionCount])\r\n    //making sure that if the user said \"no\" to all the questions, for them to start the survey all over again\r\n    if (questionCount > 4) {\r\n      setQuestionCount(0)\r\n      setCurrentQuestion(questionsList[0])\r\n      //notifying the user that they must say yes to at least one question\r\n      toast.error(\"You must answer yes to one of the questions \" + name)\r\n    }\r\n}, [questionCount]) //whenever questionCount is updated, page will be re-rendered and useEffect function will be re-ran\r\n\r\n  //when ever \"no\" is selected, update the question count +1\r\n  function noHandler() {\r\n    setQuestionCount(questionCount+1)\r\n  }\r\n\r\n  //whenever \"yes\" is selected, navigate to the appropriate URL in accordance to the question number they are on\r\n  function navigator() {\r\n    if (questionCount === 0) {\r\n      navigate('/beginnerGuide')\r\n    } else if (questionCount === 1) {\r\n      navigate('/softwareDevelopment')\r\n    } else if (questionCount === 2) {\r\n      navigate('/networking')\r\n    } else if (questionCount === 3) {\r\n      navigate('/cyberSecurity')\r\n    } else if (questionCount === 4) {\r\n      navigate('/cloudComputing')\r\n    }\r\n    \r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"center-question\">\r\n        {/* displaying the current question */}\r\n          <div className=\"row\">\r\n            <div className=\"col-xs-auto col-sm-auto col-md-auto col-xl-auto col-xxl-auto\">\r\n              <h2 className=\"animate-character\">{name} {currentQuestion}</h2>\r\n            </div>\r\n          </div>\r\n          {/* yes and no buttons */}\r\n          <div className=\"row justify-content-center\">\r\n            <div className=\"col-xs-6 col-sm-4 col-md-4 col-xl-3 col-xxl-3\">\r\n              {/* calling navigator function every time yes is clicked */}\r\n              <button className=\"btn btn-outline-secondary btn-light\" onClick = {navigator}><strong>Yes</strong></button>\r\n            </div>\r\n\r\n            <div className=\"col-xs-6 col-sm-4 col-md-4 col-xl-3 col-xxl-3\">\r\n              {/* calling noHandler function every time no is clicked */}\r\n              <button className=\"btn btn-outline-secondary btn-light\" onClick={noHandler}><strong>No</strong></button>\r\n            </div>\r\n          \r\n        </div>\r\n      </div>\r\n      {/* this is set for the toast notifications to work to let them know that they need to answer yes to at least one question */}\r\n      <ToastContainer/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default QuestionPage"],"mappings":"sIAAA,MAAOA,MAAK,EAAIC,UAAU,CAAEC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAC9D,OAASC,UAAU,KAAQ,uBAAuB,CAClD,OAAQC,WAAW,KAAQ,kBAAkB,CAC7C,OAAQC,cAAc,CAAEC,KAAK,KAAO,gBAAgB,yFAEpD,GAAMC,aAAY,CAAG,QAAfA,aAAY,EAAS,CACzB;AACA,gBAAeP,UAAU,CAACG,UAAU,CAAC,CAA9BK,IAAI,aAAJA,IAAI,CACX;AACA,GAAIC,SAAQ,CAAGL,WAAW,EAAE,CAC5B;AACA,GAAIM,cAAa,CAAG,CAAC,sBAAsB,CAAE,8CAA8C,CAAE,6CAA6C,CAAE,wCAAwC,CAAE,yCAAyC,CAAC,CAChO;AACA,cAAwCR,QAAQ,CAAC,CAAC,CAAC,wCAA9CS,aAAa,eAAEC,gBAAgB,eACpC;AACA,eAA4CV,QAAQ,CAACQ,aAAa,CAACC,aAAa,CAAC,CAAC,yCAA7EE,eAAe,eAAEC,kBAAkB,eAExC;AACAb,SAAS,CAAC,UAAM,CACd;AACA,GAAG,CAACO,IAAI,CAAE,CACRC,QAAQ,CAAC,GAAG,CAAC,CACf,CACA;AACAK,kBAAkB,CAACJ,aAAa,CAACC,aAAa,CAAC,CAAC,CAChD;AACA,GAAIA,aAAa,CAAG,CAAC,CAAE,CACrBC,gBAAgB,CAAC,CAAC,CAAC,CACnBE,kBAAkB,CAACJ,aAAa,CAAC,CAAC,CAAC,CAAC,CACpC;AACAJ,KAAK,CAACS,KAAK,CAAC,8CAA8C,CAAGP,IAAI,CAAC,CACpE,CACJ,CAAC,CAAE,CAACG,aAAa,CAAC,CAAC,CAAC;AAElB;AACA,QAASK,UAAS,EAAG,CACnBJ,gBAAgB,CAACD,aAAa,CAAC,CAAC,CAAC,CACnC,CAEA;AACA,QAASM,UAAS,EAAG,CACnB,GAAIN,aAAa,GAAK,CAAC,CAAE,CACvBF,QAAQ,CAAC,gBAAgB,CAAC,CAC5B,CAAC,IAAM,IAAIE,aAAa,GAAK,CAAC,CAAE,CAC9BF,QAAQ,CAAC,sBAAsB,CAAC,CAClC,CAAC,IAAM,IAAIE,aAAa,GAAK,CAAC,CAAE,CAC9BF,QAAQ,CAAC,aAAa,CAAC,CACzB,CAAC,IAAM,IAAIE,aAAa,GAAK,CAAC,CAAE,CAC9BF,QAAQ,CAAC,gBAAgB,CAAC,CAC5B,CAAC,IAAM,IAAIE,aAAa,GAAK,CAAC,CAAE,CAC9BF,QAAQ,CAAC,iBAAiB,CAAC,CAC7B,CAEF,CACA,mBACE,aAAK,SAAS,CAAC,WAAW,wBACxB,aAAK,SAAS,CAAC,iBAAiB,wBAE5B,YAAK,SAAS,CAAC,KAAK,uBAClB,YAAK,SAAS,CAAC,8DAA8D,uBAC3E,YAAI,SAAS,CAAC,mBAAmB,WAAED,IAAI,KAAGK,eAAe,GAAM,EAC3D,EACF,cAEN,aAAK,SAAS,CAAC,4BAA4B,wBACzC,YAAK,SAAS,CAAC,+CAA+C,uBAE5D,eAAQ,SAAS,CAAC,qCAAqC,CAAC,OAAO,CAAII,SAAU,uBAAC,+BAAoB,EAAS,EACvG,cAEN,YAAK,SAAS,CAAC,+CAA+C,uBAE5D,eAAQ,SAAS,CAAC,qCAAqC,CAAC,OAAO,CAAED,SAAU,uBAAC,8BAAmB,EAAS,EACpG,GAEJ,GACF,cAEN,KAAC,cAAc,IAAE,GACb,CAEV,CAAC,CAED,cAAeT,aAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}